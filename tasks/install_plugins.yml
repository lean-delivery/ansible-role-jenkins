---
- name: Proxy Configuration
  jenkins_script:
    url: '{{ jenkins2_config_proto }}://{{ jenkins2_host_address }}:{{ jenkins2_config_http_port }}'
    script: '{{ lookup("template", "proxy_configuration.groovy.j2") }}'
    user: '{{ jenkins2_cli_username }}'
    password: '{{ jenkins2_cli_password }}'
    validate_certs: false
    timeout: 120

- name: Update Center Refresh
  jenkins_script:
    url: '{{ jenkins2_config_proto }}://{{ jenkins2_host_address }}:{{ jenkins2_config_http_port }}'
    script: '{{ lookup("template", "update_center_refresh.groovy.j2") }}'
    user: '{{ jenkins2_cli_username }}'
    password: '{{ jenkins2_cli_password }}'
    validate_certs: false
    timeout: 120

- name: Install Jenkins plugins
  jenkins_plugin:
    url: '{{ jenkins2_config_proto }}://{{ jenkins2_host_address }}:{{ jenkins2_config_http_port }}'
    url_username: '{{ jenkins2_cli_username }}'
    url_password: '{{ jenkins2_cli_password }}'
    name: '{{ item.key | default(item) }}'
    version: '{{ item.value | default(omit) }}'
    owner: '{{ jenkins2_user }}'
    validate_certs: false
    jenkins_home: '{{ jenkins2_home_directory }}'
    state: present
    timeout: '{{ jenkins2_plugins_timeout }}'
  register: my_jenkins_plugins
  # until: my_jenkins_plugins is succeeded
  # retries: 10
  # delay: 3
  loop: >-
        {{ (jenkins2_plugins_dict | dict2items) if jenkins2_plugins_version else
          (jenkins2_plugins_suggested | union(jenkins2_plugins_list) | unique) }}
  become: true
  async: 3600
  poll: 0
  notify:
    - Restart Jenkins

- name: debug my_jenkins_plugins
  debug:
    var: my_jenkins_plugins

- name: Wait for plugins installation complete
  async_status:
    jid: '{{ item.ansible_job_id }}'
  loop: '{{ my_jenkins_plugins.results }}'
  register: plugin_install
  until: plugin_install.finished
  delay: 3
  retries: 30

- name: Force all notified handlers to run
  meta: flush_handlers
